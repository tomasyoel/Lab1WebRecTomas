name: Construcción y despliegue de una aplicación ASP.NET MVC a Azure

env:
  AZURE_WEBAPP_NAME: upt-awa-148          # Aqui va el nombre de su aplicación
  AZURE_WEBAPP_PACKAGE_PATH: '.'          # Es la ruta de destino
  DOTNET_VERSION: '8'                     # La versión de .NET

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Limpiar caché de NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-clear-cache
          restore-keys: |
            ${{ runner.os }}-nuget-
      - uses: actions/checkout@v4
      - name: Configurando .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Restaurar los paquetes
        run: cd src && dotnet restore
      - name: Ejecutar pruebas con cobertura usando coverlet
        run: |
          dotnet tool install -g coverlet.console
          cd src
          dotnet build Shorten.Tests/Shorten.Tests.csproj -c Debug
          coverlet ./Shorten.Tests/bin/Debug/net8.0 --target dotnet --targetargs "test ./Shorten.Tests/Shorten.Tests.csproj --no-build" --format cobertura --output ../TestResults/coverage.cobertura.xml
        shell: bash
      - name: ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.7
        with:
          reports: ./TestResults/coverage.cobertura.xml
          targetdir: coveragereport
          reporttypes: MarkdownSummary;MarkdownAssembliesSummary;MarkdownSummaryGithub
      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport
          path: coveragereport
      - name: Publish coverage in build summary
        run: cat coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
        shell: bash
      - name: Instalar Scanner
        run: dotnet tool install -g dotnet-sonarscanner
      - name: Ejecutar escaneo
        run: |
          cd src
          dotnet-sonarscanner begin /k:"${{ env.SONAR_PROJECT }}" /o:"${{ env.SONAR_ORG }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      - name: Publicar la aplicación de manera local
        run: cd src && dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/publish
      - name: Subir el artefacto para el job de despliegue
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/publish

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Descargar el artefacto desde el job de construccion
        uses: actions/download-artifact@v4
        with:
          name: .net-app
      - name: Desplegar a Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          restart: true
